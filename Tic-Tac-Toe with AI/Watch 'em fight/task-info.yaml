type: edu
custom_name: stage3
files:
- name: src/tictactoe/Main.java
  visible: true
  text: "package tictactoe;\n\nimport java.util.Arrays;\nimport java.util.Objects;\n\
    import java.util.Random;\nimport java.util.Scanner;\nimport static java.lang.Integer.parseInt;\n\
    import static java.lang.Math.abs;\n\npublic class Main {\n    static Scanner sc\
    \ = new Scanner(System.in);\n\n    static int cunterX = 0;\n    static int cunterO\
    \ = 0;\n    static int n = 3;\n    static String[][] ticta = new String[n][n];\n\
    \n    static String[] tict;\n\n\n\n    static void matrix (String cell ,int row\
    \  ,int column ){\n\n\n        if (cell.equals(\" \")) {\n            for ( row\
    \ = 0; row < n; row++) {\n                for (column = 0; column < ticta[row].length;\
    \ column++) {\n                    ticta[row][column] = cell;\n              \
    \  }\n            }\n        } else {\n            ticta[row][column] = cell;\n\
    \        }\n        System.out.println(\"---------\");\n        for (int i = 0;\
    \ i < n; i++) {\n            System.out.print(\"| \");\n            for (int j\
    \ = 0; j < ticta[i].length; j++) {\n                System.out.print(ticta[i][j]\
    \ + \" \");\n            }\n            System.out.print(\"|\");\n           \
    \ System.out.println();\n        }\n        System.out.println(\"---------\");\n\
    \    }\n\n    public static boolean win() {\n        int p = 0;\n        int cX\
    \ = 0;\n        int cO = 0;\n        String cha = \"X\";\n        boolean win\
    \ = false;\n        boolean possi = false;\n        boolean possix = false;\n\
    \        boolean possio = false;\n\n        //FOR ROW\n        for (int i = 0;\
    \ i < n; i++) {\n            cunterO = 0;\n            cunterX = 0;\n        \
    \    for (int j = 0; j < n; j++) {\n                if (ticta[i][j].equals(\"\
    X\")) {\n                    cunterX++;\n                } else if (ticta[i][j].equals(\"\
    O\")) {\n                    cunterO++;\n                } else if (ticta[i][j].equals(\"\
    \ \")) {\n                    p++;\n                }\n                if (cunterX\
    \ == 3) {\n                    win = true;\n                    System.out.println(\"\
    X wins\");\n                } else if (cunterO == 3) {\n                    win\
    \ = true;\n                    System.out.println(\"O wins\");\n             \
    \   }\n            }\n        }\n        cunterO = 0;\n        cunterX = 0;\n\
    \        int cunteX = 0;\n        int cunteO = 0;\n        int cX1 = 0;\n    \
    \    int cO1 = 0;\n        // for clumn\n        for (int i = 0; i < n; i++) {\n\
    \            if (cunterO == 3 || cunterX == 3) {\n                cunterO = 0;\n\
    \                cunterX = 0;\n            }\n            for (int j = 0; j <\
    \ ticta[i].length; j++) {\n                if (ticta[j][i].equals(\"X\")) {\n\
    \                    cunterX++;\n                } else if (ticta[j][i].equals(\"\
    O\")) {\n                    cunterO++;\n                } else if (ticta[j][i].equals(\"\
    \ \")) {\n                    p++;\n                }\n            }\n       \
    \ }\n\n        cunteO = 0;\n        cunteX = 0;\n        cunterO = 0;\n      \
    \  cunterX = 0;\n        // for clumn\n        for (int i = 0; i < n; i++) {\n\
    \            cunteO = 0;\n            cunteX = 0;\n\n            for (int j =\
    \ 0; j < ticta[i].length; j++) {\n                if (ticta[j][i].equals(\"X\"\
    )) {\n                    cunteX++;\n                } else if (ticta[j][i].equals(\"\
    O\")) {\n                    cunteO++;\n                } else if (ticta[j][i].equals(\"\
    \ \")) {\n                    p++;\n                }\n            }\n       \
    \     if (cunteX == 3) {\n                win = true;\n                System.out.println(\"\
    X wins\");\n                break;\n            } else if (cunteO == 3) {\n  \
    \              win = true;\n                System.out.println(\"O wins\");\n\
    \                break;\n            }\n        }\n\n        cunterO = 0;\n  \
    \      cunterX = 0;\n        for (int i = 0; i < n; i++) {\n\n            if (ticta[i][i].equals(\"\
    X\")) {\n                cunterX++;\n            } else if (ticta[i][i].equals(\"\
    O\")) {\n                cunterO++;\n            } else if (ticta[i][i].equals(\"\
    \ \")) {\n                p++;\n            }\n        }\n        if (cunterX\
    \ == 3) {\n            win = true;\n            System.out.println(\"X wins\"\
    );\n        } else if (cunterO == 3) {\n            win = true;\n            System.out.println(\"\
    O wins\");\n\n        } else {\n            cunterO = 0;\n            cunterX\
    \ = 0;\n            for (int i = 0; i < n; i++) {\n\n                if (ticta[i][n\
    \ - 1 - i].equals(\"X\")) {\n                    cunterX++;\n                }\
    \ else if (ticta[i][n - 1 - i].equals(\"O\")) {\n                    cunterO++;\n\
    \                } else if (ticta[i][n - 1 - i].equals(\" \")) {\n           \
    \         p++;\n                }\n                if (cunterX == 3) {\n     \
    \               win = true;\n                    System.out.println(\"X wins\"\
    );\n\n                } else if (cunterO == 3) {\n                    win = true;\n\
    \                    System.out.println(\"O wins\");\n\n                }\n  \
    \          }\n        }\n        for (int i = 0; i < n; i++) {\n\n           \
    \ for (int j = 0; j < n; j++) {\n                if (ticta[i][j].equals(\"X\"\
    )) {\n                    cX++;\n                } else if (ticta[i][j].equals(\"\
    O\")) {\n                    cO++;\n                } else if (ticta[i][j].equals(\"\
    _\")) {\n                    p++;\n                }\n            }\n        }\n\
    \        if (cX >= 3 && cO >= 3 && p == 0) {\n            win = true;\n      \
    \      System.out.println(\"Draw\");\n        }\n\n\n        //System.out.println(win);\n\
    \n        return win;\n    }\n    static int[] errors(String number) {\n     \
    \   int cordinates1;\n        int cordinates2;\n     //   String number = sc.nextLine();\n\
    \        int[] coordi = new int[2];\n        //int[] codi = new int[2];\n    \
    \    String[] num = number.split(\" \");\n        try  {\n            cordinates1\
    \ = parseInt(num[0]);\n            cordinates2 = parseInt(num[1]);\n         \
    \   coordi[0] = cordinates1;\n            coordi[1] = cordinates2;\n        }catch(NumberFormatException\
    \ e) {\n\n\n            return new int[]{0 ,0};\n        }\n\n        return \
    \ coordi;\n    }\n\n    public int[] rowColunm() {\n        System.out.print(\"\
    Enter the coordinates: \");\n        int[] columnRow = errors(sc.nextLine());\n\
    \        /*boolean situation = false;\n        while (columnRow[0]== 0 && !situation\
    \ ) {\n            System.out.print(\"Enter the coordinates: \");\n          \
    \  columnRow = errors(sc.nextLine());\n            situation = true;\n       \
    \     //System.out.println(Arrays.toString(columnRow));\n        }*/\n       \
    \ while (columnRow[0] == 0 && columnRow[1] == 0) {\n            System.out.println(\"\
    You should enter numbers! \");\n            System.out.print(\"Enter the coordinates:\
    \ \");\n            columnRow = errors(sc.nextLine());\n        }\n\n        while\
    \ (columnRow[0] > 3 || columnRow[1] > 3) {\n\n            System.out.println(\"\
    Coordinates should be from 1 to 3!\");\n            System.out.print(\"Enter the\
    \ coordinates: \");\n            columnRow = errors(sc.nextLine());\n\n\n    \
    \    }\n        return new int[]{columnRow[1], columnRow[0]};\n\n        //System.out.println(Arrays.toString(new\
    \ int[]{row, column}));\n        //return new int[]{row, column};\n\n    }\n\n\
    \    public int[] inputIJ() {\n        int[] ij;\n        ij = rowColunm();\n\
    \        int row = abs(ij[0] - 3);\n        int column = abs(ij[1] - 1);\n\n \
    \       while (!Objects.equals(ticta[row][column], \" \")) {\n            System.out.println(\"\
    This cell is occupied! Choose another one!\");\n\n            //rowColunm();\n\
    \            ij = rowColunm();\n            row = abs(ij[0] - 3);\n          \
    \  column = abs(ij[1] - 1);\n        }\n        return new int[]{row, column};\n\
    \    }\n    public static void main(String[] args) {\n        int newi;\n    \
    \    int newj;\n        boolean not = false;\n        String cha = \"X\";\n  \
    \      String ch = \"X\";\n        Main m = new Main();\n        Random random\
    \ = new Random(3);\n       // String tictac = sc.next();\n       // tict = tictac.split(\"\
    \");\n        //for (int i = 0; i < n; i++) {\n        //    for (int j = 0; j\
    \ < ticta[i].length; j++) {\n               // ticta[i][j] = \" \"; //tict[i *\
    \ n +j];\n               // if (ticta[i][j].equals(\"X\")) {\n               \
    \   //  cunterX++;\n              //  }else if (ticta[i][j].equals(\"O\")) {\n\
    \                   // cunterO++;\n              //  }\n         //   }\n    \
    \   // }\n        matrix(\" \", 0, 0);\n\n        //System.out.println(cunterX\
    \ + \" 1 \" + cunterO);\n\n        // System.out.println(newi + \" \" + newj);\n\
    \        int[] cell = m.inputIJ();\n        /*if (cunterX <= cunterO) {\n    \
    \        ch = \"X\";\n        } else {\n            ch = \"O\";\n        }*/\n\
    \        outer:\n        //Objects.equals(ticta[newi][newj], \" \")\n        while\
    \ (Objects.equals(ticta[cell[0]][cell[1]], \" \") && !win()) {\n\n\n         \
    \   matrix(ch, cell[0], cell[1]);\n            //System.out.println(newi + \"\
    \ \" + newj);\n            //System.out.println(m.row + \" 2 \" + m.column);\n\
    \            //cunterX++;\n             ch = \"O\";\n              if (win())\
    \ {\n\n                break outer;\n              }\n           if (ch == \"\
    O\") {\n                int i = random.nextInt(3);\n                int j = random.nextInt(3);\n\
    \                while (!Objects.equals(ticta[i][j], \" \")) {\n             \
    \       i = random.nextInt(3);\n                    j = random.nextInt(3);\n \
    \                   \n                    //System.out.println(i + \" \" + j);\n\
    \                }\n                System.out.println(\"Making move level \\\"\
    easy\\\"\");\n                matrix(ch, i, j);\n                ch = \"X\";\n\
    \            }\n           \n                //System.out.println(\"Game not finished\"\
    );\n                //not = true;\n                cell = m.inputIJ();\n\n   \
    \     \n        }\n    }\n}\n"
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    this.field[row][col] = field[row][col];
                }
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            str = str.replace("\"", "");

            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] =
                        FieldState.get(str.charAt(((2 - row) * 3 + col)));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 2;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y--;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() throws Exception {
            super(Main.class);
        }

        static String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {
                String fullMoveInput = iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                String initial;
                if (i % 2 == 0) {
                    initial = "start user easy\n";
                } else {
                    initial = "start easy user\n";
                }

                fullGameInput = initial + fullGameInput + "exit";

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput));

                i++;
            }

            tests.add(new TestCase<Clue>()
                .setInput("start easy easy\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start user user\n" +
                    "1 1\n" +
                    "2 2\n" +
                    "1 2\n" +
                    "2 1\n" +
                    "1 3\n" +
                    "exit"));

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/81/stages/449/implement
status: Solved
record: 3
